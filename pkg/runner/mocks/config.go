// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/umputun/spot/pkg/config"
)

// ConfigMock is a mock implementation of runner.Config.
//
//	func TestSomethingThatUsesConfig(t *testing.T) {
//
//		// make and configure a mocked runner.Config
//		mockedConfig := &ConfigMock{
//			AllSecretValuesFunc: func() []string {
//				panic("mock out the AllSecretValues method")
//			},
//			TargetHostsFunc: func(name string) ([]config.Destination, error) {
//				panic("mock out the TargetHosts method")
//			},
//			TaskFunc: func(name string) (*config.Task, error) {
//				panic("mock out the Task method")
//			},
//		}
//
//		// use mockedConfig in code that requires runner.Config
//		// and then make assertions.
//
//	}
type ConfigMock struct {
	// AllSecretValuesFunc mocks the AllSecretValues method.
	AllSecretValuesFunc func() []string

	// TargetHostsFunc mocks the TargetHosts method.
	TargetHostsFunc func(name string) ([]config.Destination, error)

	// TaskFunc mocks the Task method.
	TaskFunc func(name string) (*config.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// AllSecretValues holds details about calls to the AllSecretValues method.
		AllSecretValues []struct {
		}
		// TargetHosts holds details about calls to the TargetHosts method.
		TargetHosts []struct {
			// Name is the name argument value.
			Name string
		}
		// Task holds details about calls to the Task method.
		Task []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockAllSecretValues sync.RWMutex
	lockTargetHosts     sync.RWMutex
	lockTask            sync.RWMutex
}

// AllSecretValues calls AllSecretValuesFunc.
func (mock *ConfigMock) AllSecretValues() []string {
	if mock.AllSecretValuesFunc == nil {
		panic("ConfigMock.AllSecretValuesFunc: method is nil but Config.AllSecretValues was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAllSecretValues.Lock()
	mock.calls.AllSecretValues = append(mock.calls.AllSecretValues, callInfo)
	mock.lockAllSecretValues.Unlock()
	return mock.AllSecretValuesFunc()
}

// AllSecretValuesCalls gets all the calls that were made to AllSecretValues.
// Check the length with:
//
//	len(mockedConfig.AllSecretValuesCalls())
func (mock *ConfigMock) AllSecretValuesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAllSecretValues.RLock()
	calls = mock.calls.AllSecretValues
	mock.lockAllSecretValues.RUnlock()
	return calls
}

// TargetHosts calls TargetHostsFunc.
func (mock *ConfigMock) TargetHosts(name string) ([]config.Destination, error) {
	if mock.TargetHostsFunc == nil {
		panic("ConfigMock.TargetHostsFunc: method is nil but Config.TargetHosts was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockTargetHosts.Lock()
	mock.calls.TargetHosts = append(mock.calls.TargetHosts, callInfo)
	mock.lockTargetHosts.Unlock()
	return mock.TargetHostsFunc(name)
}

// TargetHostsCalls gets all the calls that were made to TargetHosts.
// Check the length with:
//
//	len(mockedConfig.TargetHostsCalls())
func (mock *ConfigMock) TargetHostsCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockTargetHosts.RLock()
	calls = mock.calls.TargetHosts
	mock.lockTargetHosts.RUnlock()
	return calls
}

// Task calls TaskFunc.
func (mock *ConfigMock) Task(name string) (*config.Task, error) {
	if mock.TaskFunc == nil {
		panic("ConfigMock.TaskFunc: method is nil but Config.Task was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockTask.Lock()
	mock.calls.Task = append(mock.calls.Task, callInfo)
	mock.lockTask.Unlock()
	return mock.TaskFunc(name)
}

// TaskCalls gets all the calls that were made to Task.
// Check the length with:
//
//	len(mockedConfig.TaskCalls())
func (mock *ConfigMock) TaskCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockTask.RLock()
	calls = mock.calls.Task
	mock.lockTask.RUnlock()
	return calls
}
